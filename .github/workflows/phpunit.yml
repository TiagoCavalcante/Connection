name: PHPUnit

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v2

    - name: Validate composer.json and composer.lock
      run: composer validate
      
    - name: Cache Composer packages
      id: composer-cache
      uses: actions/cache@v2
      with:
        path: vendor
        key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          ${{ runner.os }}-php-
    
    - name: Install dependencies
      if: steps.composer-cache.outputs.cache-hit != 'true'
      run: composer install --prefer-dist --no-progress --no-suggest
      
    - name: Create the PgSQL.env.php file
      env:
        database: ${{ secrets.PGSQL_DATABASE }}
        host: ${{ secrets.PGSQL_HOST }}
        password: ${{ secrets.PGSQL_PASSWORD }}
        port: ${{ secrets.PGSQL_PORT }}
        user: ${{ secrets.PGSQL_USER }}
      run: echo "<?php putenv('host=$host'); putenv('user=$user'); putenv('password=$password'); putenv('database=$database'); putenv('port=$port');" > tests/PgSQL.env.php
    - name: Run PgSQL tests
      env:
        database: ${{ secrets.PGSQL_DATABASE }}
        host: ${{ secrets.PGSQL_HOST }}
        password: ${{ secrets.PGSQL_PASSWORD }}
        port: ${{ secrets.PGSQL_PORT }}
        user: ${{ secrets.PGSQL_USER }}
      run: composer exec phpunit tests/PgSQLClassTest.php
      
    - name: Create the SQLite.env.php file
      env:
        database: 'database.sqlite3'
      run: echo "<?php putenv('database=$database');" > tests/SQLite.env.php
    - name: Run SQLite tests
      env:
        database: 'database.sqlite3'
      run: composer exec phpunit tests/SQLiteClassTest.php